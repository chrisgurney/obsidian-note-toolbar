import esbuild from "esbuild";
import chokidar from "chokidar";
import { yamlInliner } from "./build/yaml-inliner.mjs";
import process from "process";
import builtins from "builtin-modules";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

// use esbuild to check CSS for errors
// DISABLED for now until I have time to fix the noted issues
// await esbuild.build({
// 	entryPoints: ['src/styles.css'],
// 	bundle: false,
// 	write: false
// }).catch(() => process.exit(1));

// bring in the Style Settings YAML
const yamlInlinerPlugin = {
	name: 'yaml-inliner-plugin',
	setup(build) {
	  build.onEnd(async () => {
		try {
			await yamlInliner('src/styles.css', 'styles.css');
		} catch {
			process.exit(1);
		}
	  });
	},
  };

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	plugins: [yamlInlinerPlugin],
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	minify: prod ? true : false,
	outfile: "main.js",
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();

	// watch for changes to files outside the build process
	const watcher = chokidar.watch(['src/style-settings.yaml', 'src/styles.css']);
	watcher.on('change', async (path) => {
		console.log(`[watch] file changed: ${path}`);
		try {
			await context.rebuild();
		} 
		catch {
			process.exit(1);
		}
	});
}